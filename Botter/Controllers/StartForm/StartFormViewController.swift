//
//  StartFormViewController.swift
//  Botter
//
//  Created by Nora on 7/15/20.
//  Copyright (c) 2020 BlueCrunch. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class StartFormViewController: StartConversationViewController {
    
    // MARK: - Public properties -
    var faqsList = [FaqData]()
    @IBOutlet weak var tableView : UITableView!
    @IBOutlet weak var mainStackView : UIStackView!
    @IBOutlet weak var searchStackView : UIStackView!
    @IBOutlet weak var firstQuestionStackView : UIStackView!
    @IBOutlet weak var secondQuestionStackView : UIStackView!
    @IBOutlet weak var searchTextField : UITextField!
    @IBOutlet weak var searchAboutLabel : UILabel!
    @IBOutlet weak var firstResultQuestionLabel : UILabel!
    @IBOutlet weak var firstResultAnswerLabel : UILabel!
    @IBOutlet weak var secondResultQuestionLabel : UILabel!
    @IBOutlet weak var secondResultAnswerLabel : UILabel!
    @IBOutlet weak var noResultLabel : UILabel! 
    
    @IBAction func searchClicked(_ sender : UIButton){
        
        if searchTextField.text?.count ?? 0 > 0 {
            searchAboutLabel.text = "Search results for \(searchTextField.text ?? "")"
            self.presenter.getFaqsData(searchText: searchTextField.text ?? "")
        }
        searchStackView.arrangedSubviews[3].isHidden = true
        searchStackView.arrangedSubviews[4].isHidden = true
    }
    
    
    @IBAction func showMoreDetailsClicked(_ sender : UIButton){
        
        
    }
    
    var presenter: StartFormPresenterInterface!
    
    var loader = LoaderManager()
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.loadForms()
        prepareStackView()
    }
    
    func prepareStackView(){
        let tap1 = UITapGestureRecognizer(target: self, action: #selector(firstFaqsTapped))
        let tap2 = UITapGestureRecognizer(target: self, action: #selector(secondFaqsTapped))
        mainStackView.arrangedSubviews[1].addGestureRecognizer(tap1)
        mainStackView.arrangedSubviews[2].addGestureRecognizer(tap2)
    }
    
    @objc func firstFaqsTapped(){
        let vc =  FaqsDetailsViewController.instantiateFromStoryBoard(appStoryBoard: .Forms)
        vc.faqItem = faqsList[0].body
        self.present(vc, animated: true, completion: nil)
    }
    
    @objc func secondFaqsTapped(){
        let vc =  FaqsDetailsViewController.instantiateFromStoryBoard(appStoryBoard: .Forms)
        vc.faqItem = faqsList[0].body
        self.present(vc, animated: true, completion: nil)
    }
    
    override func newConversationClicked() {
        self.presenter.validateThenSubmitForm()
    }
    
}

// MARK: - Extensions -

extension StartFormViewController: StartFormViewInterface {
    
    
    func setFaqsData(faqsData: [FaqData]) {
        self.faqsList = faqsData
        if faqsData.count == 0 {
            setupEmptyQuestionView()
            updateFooterHeight(height: 280)
        }else if faqsData.count == 1 {
            setupFirstQuestionView(faqsData: faqsData)
            updateFooterHeight(height: 280 + Int(mainStackView.arrangedSubviews[1].frame.height))
        }else if faqsData.count == 2 {
            setAllQuestions(faqsData: faqsData)
            setupSecondQuestionView(faqsData: faqsData)
            updateFooterHeight(height: 300 + Int(mainStackView.arrangedSubviews[1].frame.height) + Int(mainStackView.arrangedSubviews[2].frame.height))
            
        }else{
            setAllQuestions(faqsData: faqsData)
            setupAllQuestionView(faqsData: faqsData)
            updateFooterHeight(height: 370 + Int(mainStackView.arrangedSubviews[1].frame.height) + Int(mainStackView.arrangedSubviews[2].frame.height))
        }
        
        
    }
    
    
    func setAllQuestions(faqsData: [FaqData]){
        firstResultAnswerLabel.text = faqsData[0].body.answer
        firstResultQuestionLabel.text = faqsData[0].body.question
        secondResultAnswerLabel.text = faqsData[1].body.answer
        secondResultQuestionLabel.text = faqsData[1].body.question
    }
    
    func setupEmptyQuestionView(){
        noResultLabel.text = "No result for \(searchTextField.text ?? "")"
        mainStackView.arrangedSubviews[1].isHidden = true
        mainStackView.arrangedSubviews[2].isHidden = true
        mainStackView.arrangedSubviews[3].isHidden = true
        searchStackView.arrangedSubviews[5].isHidden = true
        searchStackView.arrangedSubviews[3].isHidden = false
        searchStackView.arrangedSubviews[4].isHidden = false
        searchStackView.arrangedSubviews[2].isHidden = true
    }
    
    
    func setupFirstQuestionView(faqsData: [FaqData]){
        firstResultAnswerLabel.text = faqsData[0].body.answer
        firstResultQuestionLabel.text = faqsData[0].body.question
        mainStackView.arrangedSubviews[1].isHidden = false
        mainStackView.arrangedSubviews[2].isHidden = true
        mainStackView.arrangedSubviews[3].isHidden = true
        searchStackView.arrangedSubviews[5].isHidden = false
        searchStackView.arrangedSubviews[3].isHidden = true
        searchStackView.arrangedSubviews[4].isHidden = true
        searchStackView.arrangedSubviews[2].isHidden = false
        firstQuestionStackView.arrangedSubviews[2].isHidden = true
        mainStackView.layoutIfNeeded()
    }
    
    
    func setupSecondQuestionView(faqsData: [FaqData]){
        mainStackView.arrangedSubviews[1].isHidden = false
        mainStackView.arrangedSubviews[2].isHidden = false
        mainStackView.arrangedSubviews[3].isHidden = true
        searchStackView.arrangedSubviews[3].isHidden = false
        searchStackView.arrangedSubviews[3].isHidden = true
        searchStackView.arrangedSubviews[4].isHidden = true
        searchStackView.arrangedSubviews[5].isHidden = false
        searchStackView.arrangedSubviews[2].isHidden = false
        firstQuestionStackView.arrangedSubviews[2].isHidden = false
        secondQuestionStackView.arrangedSubviews[2].isHidden = true
        mainStackView.layoutIfNeeded()
    }
    
    func setupAllQuestionView(faqsData: [FaqData]){
        mainStackView.arrangedSubviews[1].isHidden = false
        mainStackView.arrangedSubviews[2].isHidden = false
        mainStackView.arrangedSubviews[3].isHidden = false
        searchStackView.arrangedSubviews[3].isHidden = false
        searchStackView.arrangedSubviews[2].isHidden = false
        firstQuestionStackView.arrangedSubviews[2].isHidden = false
        secondQuestionStackView.arrangedSubviews[2].isHidden = false
        searchStackView.arrangedSubviews[3].isHidden = true
        searchStackView.arrangedSubviews[4].isHidden = true
        searchStackView.arrangedSubviews[5].isHidden = false
        mainStackView.layoutIfNeeded()
        
    }
    
    
    func updateFooterHeight(height : Int){
        
        tableView.tableFooterView?.frame.size = CGSize(width: tableView.frame.width, height: CGFloat(height))
        tableView.reloadData()
    }
    
    func showMsg(msg: String) {
        self.showMessage(msg)
    }
    
    func showLoader() {
        self.loader.show(inRect: self.view.frame, inView: self.view)
    }
    
    func hideLoader() {
        self.loader.remove()
    }
    
    func reload() {
        self.tableView.reloadData()
    }
}

extension StartFormViewController : UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.presenter.dataCells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return self.presenter.dataCells[indexPath.row]
    }
    
    
}
