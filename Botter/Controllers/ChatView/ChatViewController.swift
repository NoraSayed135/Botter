//
//  ChatViewController.swift
//  Botter
//
//  Created by Nora on 6/3/20.
//  Copyright (c) 2020 BlueCrunch. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class ChatViewController: UIViewController {
    
    // MARK: - Public properties -
    
    @IBOutlet weak var groupedDateLbl : PaddedUILabel!
    @IBOutlet weak var tableView : UITableView!
    @IBOutlet weak var chatView : TextBoxFeild!
    @IBOutlet weak var bottomConstraint : NSLayoutConstraint!
    @IBOutlet weak var connectionErrorView : UIView!
    
    var presenter: ChatPresenterInterface!
    var original : CGFloat = 0
    var currentAudio = -1
    var botData = BotData()
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.registerBotterCellNib(FlightTicketTableViewCell.self)
        tableView.registerBotterCellNib(FlightStatusTableViewCell.self)
        tableView.registerBotterCellNib(InvoiceTableViewCell.self)
        tableView.registerBotterCellNib(NotifyTableViewCell.self)
        if #available(iOS 13.0, *) {
            overrideUserInterfaceStyle = .light
        } else {
            // Fallback on earlier versions
        }
        self.keyBoardSettings()
        self.presenter.openSocket()
        AudioHandler.shared = AudioHandler()
        
        
    }
    
    override func backDismiss(_ sender: Any) {
        self.areYouSureMsg(Msg: "Are you sure you want to end this conversation?") { (isYes) in
            if isYes{
                if self.botData.endForm.inputs.count > 0 {
                    self.presenter.openEndForm(form: self.botData.endForm)
                }else{
                    self.presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
                }
            }
        }
    }
    
    @IBAction func closeConnectionUpdateView(){
        connectionErrorView.isHidden = true
    }
    
    func connectionUpdated(isConnected : Bool){
        connectionErrorView.isHidden = isConnected
    }
    
    @IBAction func botterWebsiteClicked (){
        CommonActions.botterSiteClicked()
    }
    @IBAction func openMenu (){
        menuViewController.open(in: self, menu: self.botData.menu) { (item) in
            self.presenter.sendMenuAction(action: item)
        }
    }
    
    @IBAction func sendMesg(){
        self.view.endEditing(true)
        if chatView.getText().isEmpty{
            
        }else{
            self.presenter.sendMessage(text: self.chatView.getText())
        }
    }
    
    func clearTextBox() {
        self.chatView.setText(text: "")
    }
    
    func showError(errorMsg: String) {
        self.showMessage(errorMsg)
    }
    
}

// MARK: - Extensions -

extension ChatViewController: ChatViewInterface {
    func reload() {
        self.tableView.reloadData()
        if self.presenter.messgesList.count > 0 {
            self.tableView.scrollToRow(at: IndexPath.init(row: self.presenter.messgesList.count - 1 , section: 0), at: .bottom, animated: false)
        }
    }
}


extension ChatViewController {
    func keyBoardSettings(){
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        //
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
        
        original = bottomConstraint.constant
    }
    
    @objc func keyboardWillShow(notification: NSNotification) {
        
        adjustingHeight(show: true, notification: notification)
    }
    
    @objc func keyboardWillHide(notification: NSNotification) {
        adjustingHeight(show: false, notification: notification)
    }
    
    func adjustingHeight(show:Bool, notification:NSNotification) {
        // 1
        let userInfo = notification.userInfo!
        // 2
        let keyboardFrame:CGRect = (userInfo[UIResponder.keyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        // 3
        let animationDurarion = userInfo[UIResponder.keyboardAnimationDurationUserInfoKey] as! TimeInterval
        // 4
        var changeInHeight = (keyboardFrame.height)
        
        if #available(iOS 11.0, *) {
            let bottom = UIApplication.shared.keyWindow?.safeAreaInsets.bottom
            if show{
                changeInHeight = ( changeInHeight - (bottom ?? 0) ) * (show ? 1 : -1)
            }else{
                changeInHeight = ( changeInHeight - (bottom ?? 0) ) * (show ? 1 : -1)
            }
        } else {
            changeInHeight = ( changeInHeight ) * (show ? 1 : -1)
        }
        //5
        let lastVisibleCell = tableView.indexPathsForVisibleRows?.last
        let newValue = self.bottomConstraint.constant + changeInHeight
        UIView.animate(
            withDuration: animationDurarion,
            delay: 0,
            options: [.curveEaseInOut],
            animations: {
                if newValue < self.original {
                    print("Alert----------------")
                    self.bottomConstraint.constant = self.original
                }else if changeInHeight > 0 && newValue > changeInHeight + self.original{
                    self.bottomConstraint.constant = changeInHeight + self.original
                }else{
                    self.bottomConstraint.constant = newValue
                }
                self.view.layoutIfNeeded()
                if show{
                    if let lastVisibleCell = lastVisibleCell {
                        self.tableView.scrollToRow(
                            at: lastVisibleCell,
                            at: .bottom,
                            animated: false)
                    }
                }
        })
        
    }
    
    //    override func viewWillDisappear(_ animated: Bool) {
    //        super.viewWillDisappear(animated)
    //        if isBeingDismissed {
    //            // TODO: Do your stuff here.
    //            SocketManager.shared.dissConnect()
    //        }
    //    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        AudioHandler.shared.player.pause()
        if (self.isBeingDismissed || self.isMovingFromParent) {
            // clean up code here
            SocketManager.shared = nil
            SocketManager.shared = SocketManager()
        }
    }
    
    func removeObservers(){
        
        if self.isBeingDismissed  //presented view controller
        {
            // remove observer here
            NotificationCenter.default.removeObserver(self)
        }
    }
    
    
}
extension ChatViewController : TextBoxDelegate{
    func textBoxDidChange(textBox: TextBoxFeild) {
        
    }
    
    func shouldChangeTextInRange(textBox: TextBoxFeild) {
        
    }
    
    func textBoxDidBeginEditing(textBox: TextBoxFeild) {
        
    }
    
    func textBoxDidEndEditing(textBox: TextBoxFeild) {
        
    }
    
    func textBoxShouldBeginEditing(textBox: TextBoxFeild) {
        
    }
    
    func textBoxShouldEndEditing(textBox: TextBoxFeild) {
        
    }
    
    func checkIfLastBotInput(index : Int)->Bool{
        var isLastBotInput = false
        if presenter.messgesList.count - 1 == index{
            isLastBotInput = true
        }else{
            let nextMsg = presenter.messgesList[index + 1]
            isLastBotInput = !nextMsg.isBotMsg
        }
        
        return isLastBotInput
    }
    
    func openDatePicker(msg : BasicMessage){
        DatePickerPopViewController.open(in: self, mode: msg.hasTime ? .time : .date) { (selected) in
            msg.actions[0].title = selected
            self.presenter.triviaActionClicked(action: msg.actions[0])
        }
    }
    
}
extension ChatViewController : UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.presenter.messgesList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let msg = presenter.messgesList[indexPath.row]
        if msg.isBotMsg{
            switch msg.msgType {
            case .image:
                let cell = tableView.dequeueReusableCell(withIdentifier: "ImageBotTableViewCell") as? ImageBotTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                return cell ?? UITableViewCell()
            case .gif:
                let cell = tableView.dequeueReusableCell(withIdentifier: "GifTableViewCell") as? GifTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                return cell ?? UITableViewCell()
            case .video:
                let cell = tableView.dequeueReusableCell(withIdentifier: "VideoBotTableViewCell") as? VideoBotTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                cell?.openVideo = { url in
                    self.presenter.openVideo(url: url)
                }
                return cell ?? UITableViewCell()
            case .hero:
                let cell = tableView.dequeueReusableCell(withIdentifier: "HeroTableViewCell") as? HeroTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                cell?.actionClicked = { action in
                    self.presenter.actionClicked(action: action)
                }
                return cell ?? UITableViewCell()
            case .triviaQuestion , .dateTime:
                let cell = tableView.dequeueReusableCell(withIdentifier: "TriviaTableViewCell") as? TriviaTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                cell?.actionClicked = { action in
                    if msg.msgType == .triviaQuestion{
                        self.presenter.triviaActionClicked(action: action)
                    }else{
                        self.openDatePicker(msg: msg)
                    }
                }
                return cell ?? UITableViewCell()
            case .gallery:
                let cell = tableView.dequeueReusableCell(withIdentifier: "GallaryTableViewCell") as? GallaryTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                cell?.actionClicked = { action in
                    self.presenter.actionClicked(action: action)
                }
                cell?.openVideo = { url in
                    self.presenter.openVideo(url: url)
                }
                return cell ?? UITableViewCell()
            case .map:
                let cell = tableView.dequeueReusableCell(withIdentifier: "MapTableViewCell") as? MapTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                //                cell?.actionClicked = { action in
                //                    self.presenter.actionClicked(action: action)
                //                }
                return cell ?? UITableViewCell()
            case .audio:
                let cell = tableView.dequeueReusableCell(withIdentifier: "AudioBotTableViewCell") as? AudioBotTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row), isCurrent: indexPath.row == currentAudio, index: indexPath.row)
                return cell ?? UITableViewCell()
            case .typing :
                let cell = tableView.dequeueReusableCell(withIdentifier: "TypingIndicatorTableViewCell") as? TypingIndicatorTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                return cell ?? UITableViewCell()
            case .weather :
                let cell = tableView.dequeueReusableCell(withIdentifier: "WeatherTableViewCell") as? WeatherTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                return cell ?? UITableViewCell()
            case .flightPassngers :
                let cell = tableView.dequeueReusableCell(withIdentifier: "FlightTicketTableViewCell") as? FlightTicketTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                return cell ?? UITableViewCell()
            case .flightStatus :
                let cell = tableView.dequeueReusableCell(withIdentifier: "FlightStatusTableViewCell") as? FlightStatusTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                return cell ?? UITableViewCell()
            case .receipt :
                let cell = tableView.dequeueReusableCell(withIdentifier: "InvoiceTableViewCell") as? InvoiceTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                return cell ?? UITableViewCell()
            case .notify :
                let cell = tableView.dequeueReusableCell(withIdentifier: "NotifyTableViewCell") as? NotifyTableViewCell
                cell?.setData(text: msg.notifyText)
                return cell ?? UITableViewCell()
            default:
                let cell = tableView.dequeueReusableCell(withIdentifier: "BotChatTableViewCell") as? BotChatTableViewCell
                cell?.setData(msg: msg , showIcon: checkIfLastBotInput(index: indexPath.row))
                return cell ?? UITableViewCell()
            }
            
        }else{
            let cell = tableView.dequeueReusableCell(withIdentifier: msg.msgSent ? "UserChatTableViewCell" : "UserFaildChatTableViewCell") as? UserChatTableViewCell
            
            cell?.setData(msg: msg )
            cell?.resendAction = { myMsg in
                self.presenter.resend(msg: myMsg)
            }
            return cell ?? UITableViewCell()
        }
        
        //        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let item = self.presenter.messgesList[indexPath.row]
        if item.msgType == .receipt{
            InvoiceDetailsViewController.open(in: self, invoice: item.invoice)
        }
    }
}

extension ChatViewController : UITableViewDelegate{
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if presenter.messgesList[indexPath.row].msgType == .typing && !checkIfLastBotInput(index: indexPath.row){
            return 0
        }
        return UITableView.automaticDimension
    }
}

